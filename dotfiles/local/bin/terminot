#!/usr/bin/env python2
"""
 ______              _           __
/_  __/__ ______ _  (_)__  ___  / /_
 / / / -_) __/  ' \/ / _ \/ _ \/ __/
/_/  \__/_/ /_/_/_/_/_//_/\___/\__/ 

Terminal notifications from D-Bus to stdout
"""
from __future__ import print_function
import os
import dbus
import dbus.service
import dbus.mainloop.glib
import gobject
from itertools import count
import signal
import logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)


class Terminot(dbus.service.Object):
    """
    https://people.gnome.org/~mccann/docs/notification-spec/notification-spec-latest.html
    """
    def __init__(self, *args, **kwargs):
        self.counter = count(start=1)
        super(Terminot, self).__init__(*args, **kwargs)

    @dbus.service.method("org.freedesktop.Notifications", in_signature='',
                         out_signature='as')
    def GetCapabilities(self):
        """
        lie and say that we support everything
        """
        return ("action-icons", "actions", "body", "body-hyperlinks",
                "body-images", "body-markup", "icon-multi", "icon-static",
                "persistence", "sound")

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='susssasa{ss}i',
                         out_signature='u')
    def Notify(self, app_name, replaces_id, app_icon,
               summary, body, actions, hints, expire_timeout):
        replaces_id = replaces_id if replaces_id else next(self.counter)
        logger.info('APP=%s ID=%i SUMMARY=%s BODY=%s', app_name, replaces_id,
                    summary, body)
        return replaces_id

    @dbus.service.signal('org.freedesktop.Notifications', signature='uu')
    def NotificationClosed(self, id_in, reason_in):
        pass

    @dbus.service.method("org.freedesktop.Notifications", in_signature='u',
                         out_signature='')
    def CloseNotification(self, id):
        pass

    @dbus.service.method("org.freedesktop.Notifications", in_signature='',
                         out_signature='ssss')
    def GetServerInformation(self):
        return ("terminot", "https://www.bitoffdev.com", "1.0.0", "1")


def kill_server():
    """
    kill the current notification server
    """
    bus = dbus.SessionBus()
    obj = bus.get_object('org.freedesktop.DBus', '/')
    pid = obj.GetConnectionUnixProcessID('org.freedesktop.Notifications')
    os.kill(pid, signal.SIGTERM)
    logger.info("Killed pid %s", pid)


def aquire_busname(bus):
    """
    name is global so that it does not get garbage collected
    """
    global name
    name = dbus.service.BusName("org.freedesktop.Notifications", bus)
    uname = bus.get_unique_name()
    owner = bus.activate_name_owner('org.freedesktop.Notifications')

    while uname != owner:
        kill_server()
        owner = bus.activate_name_owner('org.freedesktop.Notifications')

    logger.info("Aquired busname")

    return name


def main():
    print(__doc__)
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    loop = gobject.MainLoop()
    bus = dbus.SessionBus()
    aquire_busname(bus)
    Terminot(bus, '/org/freedesktop/Notifications')
    loop.run()


if __name__ == '__main__':
    main()

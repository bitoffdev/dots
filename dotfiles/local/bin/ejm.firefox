#!/usr/bin/env python3
"""
You need to install gi first. On Debian you can do this with `apt install
python3-gi`.

You may also need a gtk-specific module, not sure.
"""
import subprocess
import logging
import os
import sys
import configparser
from gi import require_version
require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GObject

###############################################################################
# Configuration
###############################################################################
logging.basicConfig(level=logging.INFO)

FIREFOX_BIN = "/opt/firefox/firefox"
FIREFOX_CONFIG = os.path.expanduser("~/.mozilla/firefox")

###############################################################################
# Main
###############################################################################

class Firefox:

    def list_profiles(self):
        """
        load profile list from mozilla's `profiles.ini` file
        """
        config = configparser.ConfigParser()
        config.read(os.path.join(FIREFOX_CONFIG, "profiles.ini"))
        profiles = [ dict(config[key]) for key in config if 'profile' in key.lower() ]
        logging.info("Found profiles: {}".format(profiles))
        return profiles


    def is_profile_open(self, name):
        """
        helper function for firefox profiles
        """
        dirs = os.listdir(FIREFOX_CONFIG)
        logging.info("Using config directory: {}".format(FIREFOX_CONFIG))
        profile_dir = next(filter(lambda x: name in x, dirs))
        abs_profile_dir = os.path.join(FIREFOX_CONFIG, profile_dir)
        logging.info("Found profile directory: {}".format(abs_profile_dir))
        lock_path = os.path.join(abs_profile_dir, '.parentlock')
        logging.info("Lock path: {}".format(lock_path))
        is_open = os.path.exists(lock_path)
        logging.info("Lockfile exists: {}".format(is_open))
        return is_open


    def open_profile(self, name, extra_args):
        """
        :type extra_args: list
        """
        # create the environment
        firefox_env = os.environ.copy()
        firefox_env["GTK2_RC_FILES"] = "/usr/share/themes/Adwaita/gtk-2.0/gtkrc"
        firefox_env["GTK_THEME"] = "Adwaita:light firefox"

        # build the command
        cmd = [FIREFOX_BIN, '-P', name]
        if not self.is_profile_open(name):
            cmd.append('--no-remote')
        cmd.extend(extra_args)
        print(cmd)
        logging.info("Running command: {}".format(" ".join(cmd)))
        subprocess.Popen(cmd, env=firefox_env)


class ButtonWindow(Gtk.Window):

    def __init__(self):
        self.fox = Firefox()

        Gtk.Window.__init__(self, title="WWW Launcher")

        self.set_modal(True)
        self.set_type_hint(Gdk.WindowTypeHint.DIALOG)
        # self.set_default_size(150, 100)
        self.set_border_width(10)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(vbox)

        # profile buttons
        for profile in self.fox.list_profiles():
            button = Gtk.Button.new_with_label(profile["name"])
            button.connect("clicked", lambda button, profile=profile: self.on_profile(profile["name"]))
            vbox.pack_start(button, True, True, 0)

        # copy button
        button = Gtk.Button.new_with_label("Copy")
        button.connect("clicked", self.on_copy)
        vbox.pack_start(button, True, True, 0)

        # close button
        button = Gtk.Button.new_with_mnemonic("_Close")
        button.connect("clicked", self.on_close_clicked)
        vbox.pack_start(button, True, True, 0)

    def on_profile(self, name):
        logging.info('Button {} clicked'.format(name))
        self.fox.open_profile(name, sys.argv[1:])
        Gtk.main_quit()

    def on_copy(self, button):
        assert isinstance(button, Gtk.Button)
        text = " ".join(sys.argv[1:])
        logging.info("Copying {} to clipboard".format(text))
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.set_text(text, -1)
        # hint that the gtk.Clipboard can store targets after application exists
        clipboard.set_can_store()
        # make our data available to other applications
        clipboard.store()
        # hide window but stay alive until 1 minute passes
        self.hide()
        GObject.timeout_add(60000, Gtk.main_quit)

    def on_close_clicked(self, button):
        logging.info('Closing menu window')
        Gtk.main_quit()

win = ButtonWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()

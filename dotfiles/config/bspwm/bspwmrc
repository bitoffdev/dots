#!/bin/bash
#
#   _
#  | |__  ___ _ ____      ___ __ ___  _ __ ___
#  | '_ \/ __| '_ \ \ /\ / / '_ ` _ \| '__/ __|
#  | |_) \__ \ |_) \ V  V /| | | | | | | | (__
#  |_.__/|___/ .__/ \_/\_/ |_| |_| |_|_|  \___|
#            |_|
#
# Configures:
#   - xorg monitors
#   - bspwm monitors and desktops
#   - polybar
#   - parcellite clipboard manager
#   - nm-applet
#   - compton compositor
#
# Goals:
#   - Above all else: idempotence
#
# Help:
#   - Run this script with the '-h' flag
#
# Author:
#   - Elliot Miller @bitoffdev
#

# make sure path includes the local bin for this user
export PATH="$PATH:$HOME/.local/bin"

###############################################################################
# settings
###############################################################################
total_desktops=12

###############################################################################
# parse command line arguments
###############################################################################
verbose=0

while getopts "h?v" opt; do
    case "$opt" in
    h|\?)
	echo 'This script configures my desktop environment'
        exit 0
        ;;
    v)  verbose=1
        ;;
    esac
done

is_verbose() {
	test $verbose -eq 1 && return 0 || return 1
}

#
# log to stderr if $verbose
# - green if previous command returned zero
# - red if previous command returned non-zero
log_with_status() {
	if test $? -eq 0; then tput setaf 2; else tput setaf 1; fi
	test $verbose -eq 1 && echo $@
	tput sgr0
}

eval_and_log() {
	eval $@ >/dev/null 2>&1
	if test $? -eq 0; then tput setaf 2; else tput setaf 1; fi
	test $verbose -eq 1 && echo $@
	tput sgr0
}

###############################################################################
# HELPER METHODS
###############################################################################

# write monitor names, one per line, to stdout
x_connected_monitors () {
    xrandr | awk '$2 == "connected" { print $1 }'
}

###############################################################################
# redshift
###############################################################################
redshift -PO 3500

###############################################################################
# key repeat rate
###############################################################################
# make everything snappy!
xset r rate 250 60

###############################################################################
# configure monitors for X
###############################################################################

# get the current state of bspwm
# WMSTATE=`bspc wm --dump-state`

# turn off any monitors that were disconnected but still configured
DISCONNECTED=`xrandr | grep -E 'disconnected [0-9]+x[0-9]+' | awk '{ print $1 }'`
for MONITOR in $DISCONNECTED; do
	xrandr --output "$MONITOR" --off
done
unset DISCONNECTED

# TODO honor existing direction
# arrange connected monitors for X
PRIMARY=`xrandr | awk '$3 == "primary" { print $1 }';`
CONNECTED=`xrandr | awk '$2 == "connected" { print $1 }'`
PREV_MONITOR=$PRIMARY
xrandr --output $PRIMARY --auto
for MONITOR in $(x_connected_monitors); do
	if ! test "$MONITOR" = "$PRIMARY"; then
		xrandr --output "$MONITOR" --preferred --right-of "$PREV_MONITOR"
		PREV_MONITOR=$MONITOR
	fi
done
unset PRIMARY
unset CONNECTED
unset PREV_MONITOR

###############################################################################
# configure monitors for bspwm
###############################################################################

#
# STEP ONE: calculate the number of desktops to place on each monitor
#
monitor_count=`xrandr | grep " connected " | wc -l`
quotient=$(($total_desktops / $monitor_count))
remainder=$(( $total_desktops % $monitor_count ))

desktops_per_monitor=()
for i in $(seq 1 $monitor_count); do
	test $i -gt $remainder \
		&& desktops_per_monitor+=($quotient) \
		|| desktops_per_monitor+=($(( $quotient + 1 )))
done

is_verbose && echo "Calculated desktops per each monitor: ${desktops_per_monitor[@]}" 1>&2

#
# STEP TWO: add any missing bspwm monitors
#
# WARNING: This will add default desktops which we will need to remove later.
#
# TODO consider using `while` instead of IFS
IFS=$'\n'
for line in $(xrandr | grep " connected "); do
	GEOM=$(echo $line | grep -oE "[0-9]+x[0-9]+\+[0-9]+\+[0-9]+")
	NAME=$(echo $line | cut -d ' ' -f1)
	bspc query -M --names | grep "$NAME" >/dev/null || {
		echo "bspc wm --add-monitor $NAME $GEOM";
		bspc wm --add-monitor $NAME $GEOM;
	}
done
unset NAME
unset GEOM
unset IFS


# remove bspwm monitors that are not connected
# CONNECTED=`xrandr | awk '$2 == "connected" { print $1 }'`
# for MONITOR in $(bspc query -M --names); do
# 	if ! test -n "$(echo $CONNECTED | grep $MONITOR)"; then
# 		echo "bspc monitor $MONITOR -r"
# 		bspc monitor $MONITOR -r
# 	fi
# done
# unset CONNECTED

#
# STEP THREE: add ephemeral desktops to monitors that will be deleted
#
# This ridiculous step is required because you cannot remove all desktops from
# a monitor.
#
CONNECTED=`xrandr | awk '$2 == "connected" { print $1 }'`
for monitor_name in $(bspc query -M --names); do
	if ! test -n "$(echo $CONNECTED | grep $monitor_name)"; then
		ephemeral=ephemeral_${monitor_name}
		eval_and_log bspc monitor $monitor_name --add-desktops $ephemeral
		eval_and_log bspc monitor $monitor_name --focus $ephemeral
	fi
done
unset CONNECTED

#
# STEP FOUR: move existing desktops
#
desktop_name=1
# for (( i=0; i<$monitor_count; i++ )); do
for i in $(seq 1 $monitor_count); do
	local_desktops=${desktops_per_monitor[$((i - 1))]}
	for j in $(seq 1 $local_desktops); do
		# caret indicates the nth monitor, rather than selecting by
		# name
		eval_and_log bspc desktop $desktop_name --to-monitor ^$i
		desktop_name=$(($desktop_name + 1))
	done
done

#
# STEP FIVE: remove bspwm monitors that are not connected
#
CONNECTED=`xrandr | awk '$2 == "connected" { print $1 }'`
for MONITOR in $(bspc query -M --names); do
	if ! test -n "$(echo $CONNECTED | grep $MONITOR)"; then
		eval_and_log bspc monitor $MONITOR -r
	fi
done
unset CONNECTED

#
# STEP SIX: reset desktops to remove extras
#
desktop_index=1
for i in $(seq 1 $monitor_count); do
	local_desktops=${desktops_per_monitor[$((i - 1))]}
	upper=$((desktop_index + local_desktops - 1))
	# is_verbose && echo "Resetting desktops on monitor $i to {$desktop_index..$upper}"
	seq $desktop_index $upper | xargs bspc monitor ^$i -d
	log_with_status "bspc monitor ^$i -d $(seq $desktop_index $upper)"
	desktop_index=$((upper + 1))
done

# adopt any windows that somehow got orphaned
eval_and_log bspc wm --adopt-orphans

###############################################################################
# BAR
###############################################################################
eval_and_log pkill polybar

for line in $(x_connected_monitors); do
    eval_and_log polybar $line &
done

###############################################################################
# fix java programs
###############################################################################
# https://www.reddit.com/r/bspwm/comments/3a5xuz/java_gui_not_fully_working/
which wmname >/dev/null && eval_and_log wmname LG3D
export _JAVA_AWT_WM_NONREPARENTING=1

###############################################################################
# start other programs
###############################################################################

# start hotkey daemon
pkill sxhkd
eval_and_log sxhkd &

# start compositor
eval_and_log compton -b &

# update background image
eval_and_log $HOME/.fehbg

# start clipboard manager
# parcellite writes the clipboard contents to stdout when called
eval_and_log parcellite &

# start nm-applet
eval_and_log nm-applet &

# settings
bspc config click_to_focus "button1"
bspc config normal_border_color   "#{{base01-hex}}"
bspc config focused_border_color  "#{{base02-hex}}"
bspc config presel_feedback_color "#{{base02-hex}}"
bspc config border_width         2
bspc config window_gap           2

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true
